q
results.keys.include?("d")
results.keys.include?("q")
results.keys
results;keys
results
q
url = URI("https://v2.sg.media-imdb.com/suggests/#{first_char}/#{search_url}.json")
 search_url = URI.encode(clean_q)
clean_q = clean_q.encode!('UTF-8', :invalid => :replace, :undef => :replace)
url = URI("https://v2.sg.media-imdb.com/suggests/#{first_char}/#{search_url}.json")
 search_url = URI.encode(clean_q)
clean_q = clean_q.encode('UTF-8', :invalid => :replace, :undef => :replace)
clean_q.encode('UTF-8', :invalid => :replace, :undef => :replace)
clean_q.gsub!(/\xC2/n, '')
clean_q
URI("https://v2.sg.media-imdb.com/suggests/#{first_char}/#{clean_q..gsub!(/\xC2/n, '')}.json")
URI("https://v2.sg.media-imdb.com/suggests/#{first_char}/#{clean_q.trim}.json")
URI("https://v2.sg.media-imdb.com/suggests/#{first_char}/#{clean_q.strip}.json")
clean_q.strip
clean_q.to_s
URI("https://v2.sg.media-imdb.com/suggests/#{first_char}/#{clean_q}.json")
URI.encode(clean_q)
URI("https://v2.sg.media-imdb.com/suggests/#{first_char}/#{search_url.to_s}.json")
URI("https://v2.sg.media-imdb.com/suggests/#{first_char}/#{search_url.url}.json")
URI("https://v2.sg.media-imdb.com/suggests/#{first_char}/#{search_url}.json")
URI.encode(clean_q)
clean_q
search_url
q
URI.encode(clean_q).gsub(/^_/,'').gsub('__','_').gsub(/_$/,'')
URI.encode(clean_q).gsub(/^_/,'').gsub('__','').gsub(/_$/,'')
URI.encode(clean_q).gsub(/^_/,'').gsub('__','')
URI.encode(clean_q).gsub(/^_/,'')
URI.encode(clean_q)
search_url
clean_q
query
q
response.body.gsub(/imdb\$.+\({/,'').gsub(/}\)$/,"}")
response.body.gsub(/imdb\$.+\({/,'').gsub(/}\)$/,"XXXXXXXXXXXXXXXXXXXXXXX")
response.body.gsub(/imdb\$.+\({/,'').gsub(/})$/,"XXXXXXXXXXXXXXXXXXXXXXX")
response.body.gsub(/imdb\$.+\({/,'').gsub(/})$/,"XXXXXXXXXXXXXXXXXXXXXXX"),
response.body.gsub(/imdb\$.+\({/,'')
gr = response.body.scan(re)
gr = response.body.scan(re).first.first
re = /^imdb\$.+\({{1}}\)/
response.body.gsub(/imdb\$.+\({/,'')
response.body.gsub(/imdb\$.+\(/,'')
gr = response.body.scan(re)
re = /imdb\${1}/
gr = response.body.scan(re)
re = /^imdb\${1}/
gr = response.body.scan(re)
gr = response.body.scan(re).first.first
re = /^imdb\$.+\({1}\)/
gr = response.body.scan(re).first.first
re = /^imdb\$.+\({1}(.+)/
gr = response.body.scan(re).first.first
re = /^imdb\$.+\({1}(.+)\)$/
response.body
gr = response.body.scan(re).first.first
re = /imdb\$.+\({1}(.+)\)/
gr = response.body.scan(re).first.first
gr = response.body.scan(re)
gr = response.body.scan(re).first
gr = response.body.scan(re).first.first
re = /imdb\$.+\({1}(.+)\){1}/
gr = response.body.scan(re).first.first
response.body
q
JSON.parse gr
gr = response.body.scan(re).first.first
response.body.match(re).nil?
response.body.match(re)
"response".match(re)
JSON.parse gr
JSON.Parse gr
gr = response.body.scan(re).first.first
gr = response.body.scan(re).first;first
gr = response.body.scan(re).first
gr = response.body.scan(re)
response.read_body
JSON.parse gr
JSON.Parse gr
JSON::Parse gr
gr = response.body.scan(re)
re = /imdb\$.+\({1}(.+)\){1}/
response.read_body
response.body
c
response.body
q
response.body
response.message
response
headers
q
response
q
response.code
response
q
resource.keys.sort
resource.keys
q
url.path
url.url
url
q
res.keys()
res
q
res['resource'].keys
res['resource']
res.keys
res.class
res
q
JSON.Parse res
res.class
res
q
res.read_body
res
c
q
autho
authoriz
q
string_to_sign
authoriz
autho
q
string_to_sign
autho
authoriz
q
string_to_sign
secret_key
authoriz
autho
q
string_to_sign
autho
authoriz
q
c
string_to_sign
secret_key
authoriz
autho
c
headers
c
headers
q
res
res = RestClient::Request.execute(method: :get, url: url,timeout: 10, headers: headers)
res
RestClient::Request.execute(method: :get, url: url,timeout: 10, headers: headers)
q
RestClient::Request.execute(method: :get, url: url,timeout: 10, headers: headers)
headers
q
headers
RestClient::Request.execute(method: :get, url: url,timeout: 10, headers: headers)
q
headers
url
RestClient::Request.execute(method: :get, url: url,timeout: 10, headers: headers)
RestClient::Request.execute(method: :get, url: url,timeout: 10, headers: headers).response
RestClient::Request.execute(method: :get, url: url,timeout: 10, headers: headers)
c
headers
q
req.class
req.head
req.hea
req
req['headers']
req
q
res
continue
req.methods
req['headers']
req.headers
req.header
res.header
res.ehaders
res
q
headers.keys
headers
creds
headers.keys
headers
q
b64_hmac
q
creds['secretAccessKey']
b64_hmac
hash
q
hash
q
creds
hash.to_s.downcase
hash
hash.downcase!
hash.downcase
hash.lowercase
hash.downcase
hash.down
hash.class
hash.downcase
hash
b64_hmac
q
b64_hmac
hash
q
b64_hmac
hash
q
hash.class
hash
b64_hmac
q
hash
q
hash
continue
hash
q
hash
q
hash
q
hash_value
q
hash_value
q
string_to_sign
q
dd = %Q{rr
q
string_to_sign
q
string_to_sign
headers_to_sign
q
"#{string1}\n#{string2}"
string2 = 'bar'
string1 = 'foo'
